---
# General tasks for any OS family
- name: check current OS version
  command: uname -mrs
  register: system_info

- name: display kernel version
  debug:
    var: system_info.stdout_lines

# If OS family is RedHat then
- name: make sure yum-utils is installed
  yum:
    name: yum-utils
    state: present
  when:  ansible_facts['os_family'] == 'RedHat'

- name: update and upgrade redhat systems
  yum:
    update_cache: yes
    autoremove: yes
  register: yum_workload
  when:  ansible_facts['os_family'] == 'RedHat'

- name: check if reboot is required
  shell: sleep 10 && needs-restarting -r
  register: needs_restarting_rh
  when:  ansible_facts['os_family'] == 'RedHat'

- name: restart the system
  reboot:
    msg: "System will reboot to apply changes"
  when: ansible_facts['os_family'] == 'RedHat' and  needs_restarting_rh.rc != 0

# If OS family is Debian then
- name: update and upgrade debian systems
  apt:
    update_cache: yes
    upgrade: dist
    autoremove: yes
    autoclean: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: register needs restarting deb variable
  stat:
    path: /var/run/reboot-required
  register: needs_restarting_deb
  when: ansible_facts['os_family'] == 'Debian'

- name: reboot if kernel/libs require to
  shell: sleep 10 && /sbin/shutdown -r now 'Rebooting to update kernel'
  args:
    removes: /var/run/reboot-required
  async: 300
  poll: 0
  ignore_errors: true
  when: ansible_facts['os_family'] == 'Debian'

# General tasks for any OS family
- name: wait for system to reboot
  wait_for_connection:
    delay: 60
    timeout: 300
  when: needs_restarting_rh.rc is defined and needs_restarting_rh.rc != 0 or needs_restarting_deb.stat.exists is defined and needs_restarting_deb.stat.exists != false

- name: verify new update
  command: uname -mrs
  register: system_info
- name: display kernel version
  debug:
    var: system_info.stdout_lines